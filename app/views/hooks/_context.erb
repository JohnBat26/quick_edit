<%
   custom_fields = @issues.map(&:available_custom_fields).reduce(:&).select do |f|
     #concat f.field_format
     %w(string date int).include?(f.field_format)
   end
%>
  <li class="folder">
    <a href="#" class="submenu"><%= l(:button_quick_edit) %></a>
    <ul>
      <%= quick_edit_link(l(:field_subject), :subject, :string, !@can[:update]) %>
      <%= quick_edit_link(l(:field_parent_issue), :parent_issue_id, :int, !@can[:update]) %>


      <% unless @issues.any? {|issue| issue.disabled_core_fields.include?('start_date') } %>
      <%= quick_edit_link(l(:field_start_date), :start_date, :date, !@can[:update]) %>
      <% end %>

      <% unless @issues.any? {|issue| issue.disabled_core_fields.include?('due_date') } %>
      <%= quick_edit_link(l(:field_due_date), :due_date, :date, !@can[:update]) %>
      <% end %>

      <% custom_fields.each do |f| %>
      <%= quick_edit_link(f.name, 'custom_field_values[%d]' % f.id, f.field_format, !@can[:update]) %>
      <% end %>
   </ul>
  </li>
  <div id="quick_edit_input_dialog" style="display:none;" title="<%= l(:button_quick_edit) %>">
     <span id="quick_edit_input_dialog_message"></span>
     <form>
        <input id="quick_edit_input_dialog_new_value" type="text" size="50"></input>
        <input id="quick_edit_input_dialog_target" type="hidden"></input>
        <input id="quick_edit_input_dialog_pattern" type="hidden"></input>
        <input id="quick_edit_input_dialog_dummy" type="text" style="display:none"></input>
     </form> 
  </div>

<script>
//<![CDATA[
function quick_edit_show_input_dialog(target,pattern,message){
  $("#quick_edit_input_dialog_target").val(target);
  $("#quick_edit_input_dialog_pattern").val(pattern);
  $("#quick_edit_input_dialog_message").html(message);
  $("#quick_edit_input_dialog").dialog({
     modal: true,
     closeOnEscape: false,
     width: 500,
     height: 150,
     buttons: {
        "Ok" : quick_edit_input_dialog_ok,
        "Cancel" : quick_edit_input_dialog_cancel
     },
     close: quick_edit_input_dialog_close
  });
}

function quick_edit_input_dialog_close(){
  $("#quick_edit_input_dialog").remove();
}

function quick_edit_input_dialog_cancel(){
  $("#quick_edit_input_dialog").dialog("close");
}

function quick_edit_input_dialog_ok(){
  var new_value = $("#quick_edit_input_dialog_new_value").val();
  if(new_value === null) return;

  var target = $("#quick_edit_input_dialog_target").val();
  var pattern = new RegExp($("#quick_edit_input_dialog_pattern").val());

  if(new_value == "") {
    alert('<%=l(:text_is_required)%>');
    return;

  } else {

    if(pattern && !pattern.test(new_value)){
       alert('<%=l(:text_invalid_format)%>');
       return;
    }
  }

  <% if @issues.count > 1 %>
     if(!confirm('<%=l(:text_multiple_update_confirm)%>')) return;
  <% end %>


  var additional_index;
  var match = /(.*)\[([0-9]+)\]/.exec(target);
  if(match){
     target_name = match[1];
     additional_index = match[2];
  }else{
     target_name = target;
     additional_index = null;
  }

  var bulk_update_html_id = '';
  var bulk_update_url =  '<%= bulk_update_issues_path(:ids => @issue_ids, :back_url => @back)%>';
  if (additional_index === null) {
      bulk_update_html_id = '#context_edit_update_link_' + target_name;
      bulk_update_url += encodeURI('&issue['+target_name+']='+new_value);
  } else {
      bulk_update_html_id = '#context_edit_update_link_' + target_name + '_'+additional_index+'_';
      bulk_update_url += encodeURI('&issue['+target_name+']['+additional_index+']='+new_value);
  }

  jQuery(bulk_update_html_id)
     .attr('href',bulk_update_url)
     .click();
}
//]]>
</script>

